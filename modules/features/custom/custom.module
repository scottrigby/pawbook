<?php

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function custom_form_comment_node_book_form_alter(&$form, &$form_state, &$form_id) {
  $form['comment_body']['#after_build'][] = 'custom_customize_comment_form';
}

/**
 * After build callback for book comment form.
 */
function custom_customize_comment_form($element) {
  // Set comments to plain_text only & hide options.
  $element[$element['#language']][0]['format']['format']['#access'] = FALSE;
  $element[$element['#language']][0]['format']['format']['#value'] = 'plain_text'; 
  // Hide guidelines for all but plain_text.
  foreach (element_children($element[$element['#language']][0]['format']['guidelines']) as $format) {
    if ($format != 'plain_text') {
      $element[$element['#language']][0]['format']['guidelines'][$format]['#access'] = FALSE;
    }
  }
  return $element; 
}

/**
 * Implementation of hook_menu_alter().
 */
function custom_menu_alter(&$items) {
  // Disable core book outline tab.
  $items['node/%node/outline']['access callback'] = FALSE;
}

/**
 * Implementation of hook_menu().
 */
function custom_menu() {
  $items = array();
  // Custom reorder book tab. We don't need the BookMadeSimple module for this.
  $items['node/%node/reorder'] = array(
    'title' => t('Reorder book'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_book_reorder', 1),
    'access callback' => 'custom_book_reorder_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  return $items;
}

/**
 * Book reorder menu access callback.
 */
function custom_book_reorder_access($node) {
  $is_book = isset($node->book) && $node->book['bid'];
  $user_access = _book_outline_access($node);
  return $is_book && $user_access;
}

/**
 * Book reorder menu callback.
 */
function custom_book_reorder($form, $form_state, $node) {
  module_load_include('inc', 'book', 'book.admin');
  // @todo why does reordering not save at this path?
  #return drupal_get_form('book_admin_edit', node_load($node->book['bid']));
  // Stick with drupal_goto() for now.
  $query = array('destination' => "node/$node->nid");
  drupal_goto("admin/content/book/{$node->book['bid']}", array('query' => $query));
}

/**
 * Implementation of hook_admin_paths_alter().
 */
function custom_admin_paths_alter(&$paths) {
  // Treat the reorder book form as administrative.
  $paths['node/*/reorder'] = TRUE;
}

/**
 * Helper function to import Adium Skype smileys.
 *
 * @see http://www.adiumxtras.com/index.php?a=xtras&xtra_id=2599
 */
function custom_skype_smileys_import() {
  // Clear out old smileys.
  db_delete('smileys')->execute();
  // @todo featurize or somehow save this.
  variable_set('smileys_path', 'sites/all/libraries/smileys');
  // Import ours.
  module_load_include('inc', 'smileys', 'smileys.admin');
  smileys_import();
  // Update their DB with info from Adium's xml manifest.
  $smileys = custom_parse_skype_smileys();
  foreach ($smileys as $smiley) {
    db_update('smileys')
      ->fields(array(
          'status' => 1,
          'acronyms' => $smiley['acronyms'],
          'description' => $smiley['description'],
        ))
      ->condition('uri', $smiley['uri'])
      ->execute();
  }
}

/**
 * Helper function to parse Adium Skype smileys Emoticons.plist.
 *
 * @see custom_skype_smileys_import()
 */
function custom_parse_skype_smileys() {
  $path = variable_get('smileys_path', 'sites/all/libraries/smileys');
  $folder = 'skypeallsmileys';
  $file_name = 'Emoticons.plist';
  // Get data.
  $data = file_get_contents($path . '/' . $folder . '/' . $file_name);
  // Parse the data.
  $xmlObj = simplexml_load_string($data);
  // @todo check out drupal_xml_parser_create() instead of this.
  $arrXml = objectsIntoArray($xmlObj);
  // Isolate what we want.
  $arr = $arrXml['dict']['dict'];

  // Build the output array.
  foreach ($arr['dict'] as $key => $smiley_info) {    
    // This part of the array is either a string or an actual array of strings.
    $mixed = $smiley_info['array']['string'];
    $smileys[$key]['description'] = $smiley_info['string'];
    $smileys[$key]['acronyms'] = is_array($mixed) ? implode(' ', $mixed) : $mixed;
  }
  foreach ($arr['key'] as $key => $smiley_file) {
    $smileys[$key]['uri'] = $folder . '/' . $smiley_file;
  }
    
  return $smileys;
}

/**
 * Helper parse function for the Adium skype XML file.
 *
 * @see http://www.php.net/manual/en/function.xml-parse.php#97556
 */
function objectsIntoArray($arrObjData, $arrSkipIndices = array()) {
  $arrData = array();
  // if input is object, convert into array
  if (is_object($arrObjData)) {
    $arrObjData = get_object_vars($arrObjData);
  }
  if (is_array($arrObjData)) {
    foreach ($arrObjData as $index => $value) {
      if (is_object($value) || is_array($value)) {
        $value = objectsIntoArray($value, $arrSkipIndices); // recursive call
      }
      if (in_array($index, $arrSkipIndices)) {
        continue;
      }
      $arrData[$index] = $value;
    }
  }
  return $arrData;
}
